var request = require('request');

/**
 * Create a new bot instance
 *
 * @constructor
 * @param {integer} bot_id The ID generated by Telegram
 */
function TelegramBot(bot_id) {
    this.bot_id = bot_id;
}

// Telegram API endpoint
TelegramBot.ENDPOINT = "https://api.telegram.org";

/**
 * Create new error object. Convenience method.
 *
 * @param {string}  message    The error message
 * @param {integer} code       The error code
 * @param {integer} httpStatus The HTTP status code
 *
 * @return {Error} The new Error object.
 */
TelegramBot.error = function (message, code, httpStatus) {
    var err = new Error(message);
    err.code = code;
    err.httpStatus = httpStatus;
    return err;
}

/**
 * This function will unwrap a Telegram response and send the appropriate
 * data values back to the callback specified by the user.
 *
 * @param {function} cb The callback function
 *
 * @return {function} The wrapped callback
 */
TelegramBot.unwrap = function(cb) {
    var self = this;

    // Return the wrapped callback function
    return function (err, res, body) {
        // Handle transport and potential Telegram errors
        // by passing the error object as the first parameter.
        if (!err && body && body.ok === false) err = TelegramBot.error(body.description, body.error_code, res.statusCode);
        if (!err && res.statusCode != 200) err = TelegramBot.error('HTTP status ' + res.statusCode + ' returned.', res.statusCode, res.statusCode);
        if (err) return cb.apply(self, [err]);

        cb.apply(self, [null, body.result]);
    }
}

/**
 * Run a request against the Telegram API
 *
 * @param {integer}  id     The bot ID
 * @param {string}   method The request method
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot} The wrapped callback
 */
TelegramBot.request = function(id, method, opts, cb) {

    var settings = {
        url: TelegramBot.ENDPOINT + '/bot' + id + '/' + method,
        json: true
    };

    // Assign the form data only if it is popualted
    if (Object.keys(opts).length) settings.formData = opts;

    request.post(settings, TelegramBot.unwrap(cb));
    return this;
}

/**
 * Invoke an API request
 *
 * @param {string}   method The request method
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot} The wrapped callback
 */
TelegramBot.prototype.invoke = function(method, opts, cb) {
    return TelegramBot.request.apply(this, [this.bot_id, method, opts, cb]);
}

/**
 * Invoke the 'getMe' method
 *
 * @param {function} cb The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.getMe = function(cb) {
    return this.invoke('getMe', {}, cb);
}

/**
 * Invoke the 'sendMessage' method
 *
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.sendMessage = function(opts, cb) {
    return this.invoke('sendMessage', opts, cb);
}

/**
 * Invoke the 'forwardMessage' method
 *
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.forwardMessage = function(opts, cb) {
    return this.invoke('forwardMessage', opts, cb);
}

/**
 * Invoke the 'sendPhoto' method
 *
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.sendPhoto = function(opts, cb) {
    return this.invoke('sendPhoto', opts, cb);
}

/**
 * Invoke the 'sendAudio' method
 *
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.sendAudio = function(opts, cb) {
    return this.invoke('sendAudio', opts, cb);
}

/**
 * Invoke the 'sendDocument' method
 *
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.sendDocument = function(opts, cb) {
    return this.invoke('sendDocument', opts, cb);
}

/**
 * Invoke the 'sendSticker' method
 *
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.sendSticker = function(opts, cb) {
    return this.invoke('sendSticker', opts, cb);
}

/**
 * Invoke the 'sendVideo' method
 *
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.sendVideo = function(opts, cb) {
    return this.invoke('sendVideo', opts, cb);
}

/**
 * Invoke the 'sendLocation' method
 *
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.sendLocation = function(opts, cb) {
    return this.invoke('sendLocation', opts, cb);
}

/**
 * Invoke the 'sendChatAction' method
 *
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.sendChatAction = function(opts, cb) {
    return this.invoke('sendChatAction', opts, cb);
}

/**
 * Invoke the 'getUserProfilePhotos' method
 *
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.getUserProfilePhotos = function(opts, cb) {
    return this.invoke('getUserProfilePhotos', opts, cb);
}

/**
 * Invoke the 'getUpdates' method
 *
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.getUpdates = function(opts, cb) {
    return this.invoke('getUpdates', opts, cb);
}

/**
 * Invoke the 'setWebhook' method
 *
 * @param {object}   opts   The request objects
 * @param {function} cb     The callback function
 *
 * @return {TelegramBot}
 */
TelegramBot.prototype.setWebhook = function(opts, cb) {
    return this.invoke('setWebhook', opts, cb);
}

module.exports = TelegramBot;